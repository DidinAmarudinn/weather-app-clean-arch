// Mocks generated by Mockito 5.0.17 from annotations
// in clean_arch_with_provider/test/persentation/page/weather_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:clean_arch_with_provider/common/enum_state.dart' as _i4;
import 'package:clean_arch_with_provider/domain/usecase/get_current_weather.dart'
    as _i2;
import 'package:clean_arch_with_provider/presentation/provider/weather_provider.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetCurrentWeather_0 extends _i1.Fake
    implements _i2.GetCurrentWeather {}

/// A class which mocks [WeatherProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherProvider extends _i1.Mock implements _i3.WeatherProvider {
  MockWeatherProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCurrentWeather get currentWeather =>
      (super.noSuchMethod(Invocation.getter(#currentWeather),
          returnValue: _FakeGetCurrentWeather_0()) as _i2.GetCurrentWeather);
  @override
  _i4.RequestState get requestState =>
      (super.noSuchMethod(Invocation.getter(#requestState),
          returnValue: _i4.RequestState.noData) as _i4.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i5.Future<void> fetchCurrentWeather(String? cityName) =>
      (super.noSuchMethod(Invocation.method(#fetchCurrentWeather, [cityName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
